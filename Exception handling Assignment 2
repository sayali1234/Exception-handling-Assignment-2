{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f9a9bdf-5f78-41b5-aa05-635103e15d7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1) Explain why we have to use the Exception class while creating a Custom Exception.\n",
    "Ans: Custom exceptions provide you the flexibility to add attributes and methods that are not part of a standard Java exception. These can store additional \n",
    "     information, like an application-specific error code, or provide utility methods that can be used to handle or present the exception to a user."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53247617-f282-4f46-8e81-51343347a8bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q2) Write a python program to print Python Exception Hierarchy.\n",
    "Ans: try:\n",
    "        # Some Code.... \n",
    "\n",
    "    except:\n",
    "        # optional block\n",
    "        # Handling of exception (if required)\n",
    "\n",
    "    else:\n",
    "       # execute if no exception\n",
    "\n",
    "    finally:\n",
    "       # Some code .....(always executed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed31c653-5fed-4435-94c5-3c3d8ede8b34",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q3) What errors are defined in the ArithmeticError class? Explain any two with an example.\n",
    "Ans: ArithmeticError is thrown when an error occurs while performing mathematical operations.An arithmetic error is a type of logic error but involves mathematics.\n",
    "     A typical example when performing a division equation is that you cannot divide by zero without causing an issue.\n",
    "     1)ZeroDivisionError: In Mathematics, when a number is divided by a zero, the result is an infinite number. It is impossible to write an Infinite number\n",
    "       physically. Python interpreter throws “ZeroDivisionError: division by zero” error if the result is infinite number.\n",
    "     2)FloatingPointError\n",
    "     3)OverflowError:An OverflowError exception is raised when an arithmetic operation exceeds the limits to be represented. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "928cb2e7-26c2-4a3d-8699-25c12f7c53db",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q4) Why LookupError class is used? Explain with an example KeyError and IndexError.\n",
    "Ans: LookupError exception class used to handle both IndexError and KeyError exception classes.Lookup Error acts as a base class for the exceptions that occur\n",
    "     when a key or index used on a mapping or sequence of a list/dictionary is invalid or does not exists.It has following two types\n",
    "     1)KeyError: A Python KeyError exception is what is raised when you try to access a key that isn't in a dictionary.And example is\n",
    "       employees = {1: \"John\", 2: \"Darren\", 3: \"Paul\"}\n",
    "       print(employees[4])\n",
    "     2)IndexError: An IndexError means that your code is trying to access an index that is invalid. This is usually because the index goes out of bounds by being\n",
    "       too large. For example, if you have a list with three items and you try to access the fourth item, you will get an IndexError."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce9a1892-12d3-483e-82cc-66c4b6714219",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q5) Explain ImportError. What is ModuleNotFoundError?\n",
    "Ans: 1)ImportError : In Python, ImportError occurs when the Python program tries to import module which does not exist in the private table. This exception can be \n",
    "       avoided using exception handling using try and except blocks. \n",
    "     2)ModuleNotFoundError:  This error occurs when you're trying to access or use a module that cannot be found. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6896c92-9421-4e26-b0e5-27dbbca44a98",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q6. List down some best practices for exception handling in python.\n",
    "Ans: 1)Use always a specific exception.\n",
    "     2)Print always a proper message.\n",
    "     3)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
